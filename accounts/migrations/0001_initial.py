# Generated by Django 5.1.6 on 2025-04-06 23:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('institution', 'Institution'), ('researcher', 'Researcher'), ('community', 'Community Member')], default='student', max_length=15, verbose_name='User Type')),
                ('bio', models.TextField(blank=True, verbose_name='Biography')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='Profile Picture')),
                ('institution', models.CharField(blank=True, max_length=100, verbose_name='Institution')),
                ('field_of_study', models.CharField(blank=True, max_length=100, verbose_name='Field of Study')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Location')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('social_linkedin', models.URLField(blank=True, verbose_name='LinkedIn')),
                ('social_twitter', models.URLField(blank=True, verbose_name='Twitter')),
                ('social_github', models.URLField(blank=True, verbose_name='GitHub')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('poll_notifications', models.BooleanField(default=True, verbose_name='Poll Notifications')),
                ('comment_notifications', models.BooleanField(default=True, verbose_name='Comment Notifications')),
                ('public_profile', models.BooleanField(default=True, verbose_name='Public Profile')),
                ('show_email', models.BooleanField(default=False, verbose_name='Show Email')),
                ('high_contrast', models.BooleanField(default=False, verbose_name='High Contrast Mode')),
                ('large_text', models.BooleanField(default=False, verbose_name='Large Text')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InstitutionProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(max_length=255, verbose_name='Institution Name')),
                ('institution_type', models.CharField(choices=[('university', 'University'), ('college', 'College'), ('high_school', 'High School'), ('research', 'Research Institute'), ('government', 'Government Agency'), ('nonprofit', 'Non-profit Organization'), ('other', 'Other')], max_length=50, verbose_name='Institution Type')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Phone')),
                ('established_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Established Year')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='institution_logos/', verbose_name='Logo')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='institution_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Institution Profile',
                'verbose_name_plural': 'Institution Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
                ('verification_token', models.CharField(blank=True, max_length=64, null=True, verbose_name='Verification Token')),
                ('token_expiry', models.DateTimeField(blank=True, null=True, verbose_name='Token Expiry')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Verification',
                'verbose_name_plural': 'User Verifications',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('followee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('follower', 'followee')},
            },
        ),
    ]
